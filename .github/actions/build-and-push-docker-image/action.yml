# .github/actions/build-and-push-docker-image/action.yml
name: 'Build and push Docker image'
description: 'Build a Docker image e push it on container registry (Docker and Ghcr.io)'

inputs:
  repo:
    description: 'GitHub Repository where the Dockerfile is (ex: neomediatech/cron-docker)'
    required: true
    type: string
  image-tag:
    description: 'Image tag to compile (example: 3.10)'
    required: false
    type: string
    default: "latest"
  derived-image-prefix:
    description: 'Prefix for the derived image (ex: neomediatech/cron)'
    required: false
    type: string
  ghcr_token:
    required: true
    type: string
  docker_username:
    required: true
    type: string
  docker_pwd:
    required: true
    type: string

outputs:
  image-res:
    description: "Result of the executed command"
    value: ${{ steps.get-pkg-ver.outputs.cmd-res }}
  update-needed:
    description: "Whether the derived-image needs updating (true/false/unknown)"
    value: ${{ steps.get-pkg-ver.outputs.update-needed }}
  base-img-pkg-ver:
    description: "Package version taken from base image"
    value: ${{ steps.get-pkg-ver.outputs.base-img-pkg-ver }}

runs:
  # Indica una Composite Action
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        repository: ${{ inputs.repo }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.ghcr_token }}

    - name: Log in to Docker Registry
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_pwd }}

    - name: Get metadata from image
      id: get-image-meta
      shell: bash
      run: |
        # verifico se il tag dell'immagini contiene un "-"
        if [[ "${{ inputs.image-tag }}" =~ "-" ]]; then
          DOCKERDIR="$(echo ${{ inputs.image-tag }} | cut -d'-' -f2-)"
          DOCKERFILE_TAG="$(echo ${{ inputs.image-tag }} | cut -d'-' -f1)"
        else
          DOCKERDIR="."
          DOCKERFILE_TAG="${{ inputs.image-tag }}"
        fi

        # se il tag Ã¨ "latest" cerco sia Dockerfile che Dockerfile.latest
        if [[ "${{ inputs.image-tag }}" == "latest" ]]; then
          if [[ -f "$DOCKERDIR/Dockerfile" ]]; then
            DOCKERFILE="Dockerfile"
          else
            DOCKERFILE="Dockerfile.latest"
          fi
        else
          DOCKERFILE="Dockerfile.$DOCKERFILE_TAG"
        fi

        ls -lah
        # se il file non esiste mi fermo qui
        if [[ ! -f $DOCKERDIR/$DOCKERFILE ]]; then
          echo "::error:: $DOCKERDIR/$DOCKERFILE non trovato. Non posso proseguire"
        fi

        # cerco l'immagine di base in $DOCKERDIR/$DOCKERFILE
        echo "::info:: Debug 1"
        STICKY_VERSION="$(cat $DOCKERDIR/$DOCKERFILE |grep STICKY_VERSION=|tail -n 1|awk -F'=' '{print $2}')"
        FROM_IMAGE_TMP="$(cat $DOCKERDIR/$DOCKERFILE |grep FROM|tail -n 1|awk '{print $2}')"
        echo "::info:: Debug 2"
        if [[ "$FROM_IMAGE_TMP" =~ '$' ]]; then
          VAR_FROM="$(echo $FROM_IMAGE_TMP|sed -E 's/^[^:]+:\$(\{)?([^\}]+)(\})?.*/\2/')"
          VERSION="$(cat $DOCKERDIR/$DOCKERFILE|grep "$VAR_FROM"|grep -E "ENV|ARG"|sed -E 's/^(ARG|ENV)[[:space:]]+[^=]+=//')"
          FROM_IMAGE="$(echo "$FROM_IMAGE_TMP"|sed "s/\${\?$VAR_FROM}\?/$VERSION/")"
          echo "VERSION: $VERSION"
        else
          FROM_IMAGE="$FROM_IMAGE_TMP"
        fi
        echo "Base image taken from $DOCKERDIR/$DOCKERFILE : $FROM_IMAGE"

        if [[ -n "${{ inputs.derived-image-prefix }}" ]]; then
          IMAGE="ghcr.io/${{ inputs.derived-image-prefix }}:${{ inputs.image-tag }}"
        else
          IMAGE="ghcr.io/${{ inputs.repo }}:${{ inputs.image-tag }}"
        fi

        IMAGE_META="$(skopeo inspect docker://${IMAGE} || echo "")"
        BASE_IMAGE="$(echo "$IMAGE_META" | jq -r '.Labels."org.opencontainers.image.base" // ""')"
        PACKAGE_NAME="$(echo "$IMAGE_META" | jq -r '.Labels."org.opencontainers.package.name" // ""')"
        PACKAGE_VERSION="$(echo "$IMAGE_META" | jq -r '.Labels."org.opencontainers.package.version" // ""')"
        BASE_IMAGE_META="$(skopeo inspect docker://${BASE_IMAGE} || echo "")"
        BASE_DIGEST=$(echo "$BASE_IMAGE_META" | jq -r '.Digest // ""')
        IMAGE_TYPE="$(echo "$IMAGE_META" | jq -r '.Labels."it.neomediatech.app-label" // ""')"

        echo "BASE_DIGEST=$BASE_DIGEST" >> $GITHUB_ENV
        echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_ENV
        echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
        echo "IMAGE_TYPE=$IMAGE_TYPE" >> $GITHUB_ENV
        echo "IMAGE=$IMAGE" >> $GITHUB_ENV
        echo "STICKY_VERSION=$STICKY_VERSION" >> $GITHUB_ENV
        echo "DOCKERDIR=$DOCKERDIR" >> $GITHUB_ENV
        echo "DOCKERFILE=$DOCKERFILE" >> $GITHUB_ENV

    - name: Get base image package version
      id: get-pkg-ver
      uses: Neomediatech/gh-workflows/.github/actions/image-type-list@main
      with:
        image-type: '${{ env.IMAGE_TYPE }}'
        base-image: '${{ env.BASE_IMAGE }}'
        derived-image: '${{ env.IMAGE }}'
        package-to-check: "${{ env.PACKAGE_NAME }}"
        image-version: ${{ inputs.image-tag }}
        sticky-version: "${{ env.STICKY_VERSION}}"

    - name: Build and push image
      id: build-and-push
      shell: bash
      run: |
        IMAGE_DATE="$(date --rfc-3339='seconds')"
        PACKAGE_VERSION="${{ steps.get-pkg-ver.outputs.base-img-pkg-ver }}"

        echo "::notice:: docker build --pull --label org.opencontainers.image.base.digest=$BASE_DIGEST \
          --label org.opencontainers.image.created=$IMAGE_DATE \
          --label org.opencontainers.image.source=https://github.com/${{ inputs.repo }} \
          --label org.opencontainers.image.base=$BASE_IMAGE \
          --label org.opencontainers.package.name=$PACKAGE_NAME \
          --label org.opencontainers.package.version=$PACKAGE_VERSION \
          -t $IMAGE -f $DOCKERDIR/$DOCKERFILE $DOCKERDIR/"

        #docker build --pull --label "org.opencontainers.image.base.digest=$BASE_DIGEST" \
        #    --label "org.opencontainers.image.created=$IMAGE_DATE" \
        #    --label org.opencontainers.image.source=https://github.com/${{ inputs.derived-image-repo}} \
        #    --label "org.opencontainers.image.base=$BASE_IMAGE" \
        #    --label "org.opencontainers.package.name=$PACKAGE_NAME" \
        #    $PACKAGE_LABEL \
        #    -t $DERIVED_IMAGE -f $DOCKERDIR/$DOCKERFILE $DOCKERDIR/
        #docker push $DERIVED_IMAGE

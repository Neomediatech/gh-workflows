# .github/actions/image-type-list/action.yml
name: 'Get image type'
description: 'Get imaghe type and return if update is needed.'

inputs:
  image-type:
    description: 'Image type chosen from below list (php, exim, rspamd, ssh, others)'
    required: false
    type: string
    default: "none"
  base-image:
    description: 'Image to use for executing commands (example: ubuntu:rolling)'
    required: true
    type: string
    default: "ubuntu:rolling"
  derived-image:
    description: 'Image to use for executing commands (example: ghcr.io/neomediatech/ubuntu-base:rolling)'
    required: true
    type: string
    default: "ghcr.io/neomediatech/ubuntu-base:rolling"
  package-to-check:
    description: 'The name for the package to check to compare with (e.g. exim4-daemon-heavy)'
    required: false
    type: string

outputs:
  image-res:
    description: "Result of the executed command"
    value: ${{ steps.main_logic.outputs.cmd-res }}
  update-needed:
    description: "Whether the derived-image needs updating (true/false/unknown)"
    value: ${{ steps.main_logic.outputs.update-needed }}

runs:
  using: "composite" # Indichiamo che è una Composite Action
  steps:
    - name: Execute Image Check Logic
      id: main_logic # Assegniamo un ID a questo step per catturare i suoi output
      shell: bash
      run: |
        DOCKER_CMD="docker run --rm --entrypoint /bin/sh -u root"

        UPDATE_NEEDED="unknown"

        case "${{ inputs.image-type }}" in
          "php")
            #BASE_PACKAGE_VERSION="$($DOCKER_CMD ${{ inputs.base-image }} -c "printenv PHP_VERSION")"
            BASE_PACKAGE_VERSION="$(skopeo inspect docker://${{ inputs.base-image }} | jq -r '.Env[] | select(startswith("PHP_VERSION=")) | split("=")[1]')"
            #DERIVED_PACKAGE_VERSION="$($DOCKER_CMD ${{ inputs.derived-image }} -c "printenv PHP_VERSION")"
            DERIVED_PACKAGE_VERSION="$(skopeo inspect docker://${{ inputs.derived-image }} | jq -r '.Env[] | select(startswith("PHP_VERSION=")) | split("=")[1]')"
            ;;
          "dovecot")
            DOVECOT_GPG_REPO="https://repo.dovecot.org/DOVECOT-REPO-GPG-2.4"
            PKG_INST="curl gpg gpg-agent apt-transport-https ca-certificates"
 
            BASE_PACKAGE_VERSION_TMP="$($DOCKER_CMD -v /tmp/dovecot:/tmp/dovecot ${{ inputs.base-image }} -c '$SH_CMD')"
            MYHOME=~
            mkdir -p ~/temp
            chmod 777 ~/temp
            SH_CMD_FILE="$(mktemp ~/temp/dovecot_script_XXXXXX.sh)"
            echo '#!/bin/sh' > $SH_CMD_FILE
            echo "set -x" >> $SH_CMD_FILE
            echo "echo 'start apt...'" >> $SH_CMD_FILE
            echo "apt-get update 1>/dev/null ; apt-get install -y --no-install-recommends $PKG_INST 1>/dev/null" >> $SH_CMD_FILE
            echo "curl -s $DOVECOT_GPG_REPO | gpg --dearmor -o /usr/share/keyrings/dovecot.gpg" >> $SH_CMD_FILE
            echo "echo 'deb [signed-by=/usr/share/keyrings/dovecot.gpg] https://repo.dovecot.org/ce-2.4-latest/ubuntu/noble noble main' > /etc/apt/sources.list.d/dovecot.list" >> $SH_CMD_FILE
            echo "apt-get update 1>/dev/null" >> $SH_CMD_FILE
            echo "apt-cache policy ${{ inputs.package-to-check }} |grep Candidat|awk '{print $2}') > /tmp/dovecot/version.txt" >> $SH_CMD_FILE
            chmod 777 $SH_CMD_FILE
            cat $SH_CMD_FILE
            echo "Permessi di $SH_CMD_FILE: $(stat -c '%a %n' "$SH_CMD_FILE")"
            ls -lah ~
            echo "Running $DOCKER_CMD -v /tmp/dovecot:/tmp/dovecot -v ~/temp:$MYHOME/temp ${{ inputs.base-image }} -c \"$SH_CMD_FILE\""
            $DOCKER_CMD -v /tmp/dovecot:/tmp/dovecot -v ~/temp:$MYHOME/temp ${{ inputs.base-image }} -c "$SH_CMD_FILE"
            echo "ok?"
            ls -lah /tmp
            BASE_PACKAGE_VERSION="$(cat /tmp/dovecot/version.txt)"
            DERIVED_PACKAGE_VERSION="$(skopeo inspect docker://${{ inputs.derived-image }} | jq -r '.Labels."org.opencontainers.package.version"' || echo "")"
            rm -rf /tmp/dovecot $MYHOME/temp
            ;;
          *)
            if [[ "${{ inputs.package-to-check }}" != "" ]]; then
              BASE_PACKAGE_VERSION="$(docker run --rm --entrypoint /bin/sh -u root ${{ inputs.base-image }} -c "apt-get update 1>/dev/null ; apt-cache policy ${{ inputs.package-to-check }} |grep Candidat|awk '{print \$2}'")"
              DERIVED_PACKAGE_VERSION="$(skopeo inspect docker://${{ inputs.derived-image }} | jq -r '.Labels."org.opencontainers.package.version"' || echo "")"
            else
              echo "::warning:: package-to-check non fornito, non posso eseguire il check"
              BASE_PACKAGE_VERSION=""
              DERIVED_PACKAGE_VERSION=""
            fi
            ;;
        esac

        echo "BASE_PACKAGE_VERSION: $BASE_PACKAGE_VERSION"
        echo "DERIVED_PACKAGE_VERSION: $DERIVED_PACKAGE_VERSION"

        if [[ "$BASE_PACKAGE_VERSION" == "" || "$DERIVED_PACKAGE_VERSION" == "" ]]; then
          echo "Impossibile determinare le versioni. UPDATE_NEEDED impostato a 'unknown'."
          UPDATE_NEEDED="unknown"
        elif [[ "$BASE_PACKAGE_VERSION" != "$DERIVED_PACKAGE_VERSION" ]]; then
          echo "La versione di base ($BASE_PACKAGE_VERSION) è diversa da quella derivata ($DERIVED_PACKAGE_VERSION)."
          UPDATE_NEEDED="true"
        else
          echo "Le versioni sono identiche: $BASE_PACKAGE_VERSION."
          UPDATE_NEEDED="false"
        fi
        echo "Update needed: $UPDATE_NEEDED"
        echo "update-needed=$UPDATE_NEEDED" >> $GITHUB_OUTPUT

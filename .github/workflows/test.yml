name: test
on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'GitHub Repository where the Dockerfile is (ex: neomediatech/cron-docker)'
        required: true
        type: string
      image-tag:
        description: 'Image tag to compile (example: 3.10)'
        required: false
        type: string
        default: "latest"
      derived-image-prefix:
        description: 'Prefix for the derived image (ex: neomediatech/cron)'
        required: false
        type: string

jobs:
  #one-job:
  #  runs-on: [self-hosted]
  #  strategy:
  #    matrix:
  #      version: ["ver1","ver2","ver3"]
  #      type: ["type1","type2","type3"]
  #    max-parallel: 1
  #  env:
  #    MASTER_REPO: "Neomediatech/gh-workflows.git"
  #  steps:
  #    - name: Set some var
  #      id: set-vars
  #      run: |
  #        echo "DERIVED_IMAGE=${{ matrix.version }}-${{ matrix.type }}" >> $GITHUB_ENV

  #    - name: Get some var
  #      id: get-vars
  #      run: |
  #        echo "DERIVED_IMAGE=$DERIVED_IMAGE"

  #call_reusable_workflow:
  #  # Rimuovi completamente la riga 'runs-on: ubuntu-latest' da qui
  #  uses: Neomediatech/gh-workflows/.github/workflows/image-type-list.yml@main
  #  with:
  #    image-type: "php"
  #    base-image: "php:8.4-apache"
  #    derived-image: "ghcr.io/neomediatech/php:8.4-apache"
        
  #use_reusable_workflow_outputs:
  #  runs-on: [self-hosted]
  #  needs: call_reusable_workflow
  #  steps:
  #    - name: Print output from reusable workflow
  #      run: |
  #        echo "Output from reusable workflow:"
  #        echo "exit-code: ${{ needs.call_reusable_workflow.outputs.exit-code }}"
  #        echo "cmd-res: ${{ needs.call_reusable_workflow.outputs.cmd-res }}"

  run_actions:
    runs-on: [self-hosted]
    steps:
      #- name: Run Remote Docker Image Check Action
      #  id: remote_checker # ID per accedere agli output
      #  uses: Neomediatech/gh-workflows/.github/actions/image-type-list@main
      #  with:
      #    image-type: 'php'
      #    base-image: 'php:8.4-apache'
      #    derived-image: 'ghcr.io/neomediatech/php:8.4-apache'

      #- name: Find Dockerfiles in a repo
      #  id: discover-dockerfiles
      #  uses: Neomediatech/gh-workflows/.github/actions/discover-dockerfiles@main
      #  with:
      #    repository: Neomediatech/php

      #- name: Process Remote Action Outputs
      #  run: |
      #    #echo "Exit Code from Remote Action: ${{ steps.remote_checker.outputs.exit-code }}"
      #    #echo "Update Needed from Remote Action: ${{ steps.remote_checker.outputs.update-needed }}"
      #    echo "Matrix: ${{ steps.discover-dockerfiles.outputs.matrix }}"
      #    echo "Repo lower: ${{ steps.discover-dockerfiles.outputs.repo-lower }}"

      #- name: Build and push docker image
      #  id: build-docker-image
      #  uses: Neomediatech/gh-workflows/.github/actions/build-and-push-docker-image@main
      #  with:
      #    repo: ${{ inputs.repo }}
      #    image-tag: ${{ inputs.image-tag }}
      #    derived-image-prefix: ${{ inputs.derived-image-prefix }}
      #    ghcr_token: ${{ secrets.GHCR_TOKEN }}
      #    docker_username: ${{ vars.DOCKER_USERNAME }}
      #    docker_pwd: ${{ secrets.DOCKER_PASSWORD }}

      - name: test1
        id: test1
        run: |
          echo $PATH

          # install HTTPie
          curl https://packages.httpie.io/binaries/linux/http-latest -o /usr/local/sbin/http
          chmod +x /usr/local/sbin/http
          ln -s /usr/local/sbin/http /usr/local/sbin/https
          
          # test usage
           https --verify=no -a ${{ secrets.NOTIFY_UP }} POST ${{ secrets.NOTIFY_ENDPOINT }} tags=all format=html title="prova ${{ github.run_id }}-${{ github.run_number }}" body="${{ github.job }}"

name: Notifica (via Apprise o altro) con report e cronologia

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      status:
        required: false
        type: string
        description: "Risultato dell'operazione: success o failure"
      docker_image:
        required: false
        type: string
        description: "Nome dell'immagine Docker creata"
      message:
        required: false
        type: string
        description: "Messaggio personalizzato da includere"
      report_file:
        required: false
        type: string
        default: "report.txt"
        description: "Nome del file da allegare alla notifica email"
      notify_url:
        required: false
        type: string
        description: "Override per l'URL di notifica Apprise (push)"
      email_url:
        required: false
        type: string
        description: "Override per l'URL email Apprise"
      build-result:
        required: true
        type: string
        description: "Build image result"
      report-name:
        required: true
        type: string
        description: "Report filename"
      image-update-result:
        required: true
        type: string
        description: "Image update result"

    #secrets:
    #  NOTIFY_UP:
    #    required: true
    #  NOTIFY_ENDPOINT:
    #    required: true

jobs:
  create-report:
    runs-on: [self-hosted]
    name: Esegui processo

    steps:
      - name: Esegui processo e genera report
        run: |
          echo "🛠️ Job eseguito il: $(date)" > ${{ inputs.report-name }}
          echo "✅ Aggiornamento immagine: ${{ inputs.image-update-result }}" >> ${{ inputs.report-name }}
          echo "📄 Fine log." >> ${{ inputs.report-name }}

      - name: Carica report come artefatto
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ github.run_id }}
          path: ${{ inputs.report-name }}
          retention-days: 30

      - name: Pulisci vecchi artefatti (mantieni ultimi 10)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/${{ github.repository }}/actions/artifacts |
            jq -r '.artifacts[] | select(.name | startswith("report-")) | "\(.name) \(.id) \(.created_at)"' |
            sort -k3 -r |
            tail -n +11 |
            cut -d' ' -f2 |
            while read artifact_id; do
              echo "🧹 Elimino artifact ID: $artifact_id"
              echo "TEST gh api --method DELETE repos/${{ github.repository }}/actions/artifacts/$artifact_id"
            done

  notify:
    runs-on: ubuntu-latest
    needs: create-report
    if: always()

    steps:
      - name: Scarica report
        uses: actions/download-artifact@v4
        with:
          name: report-${{ github.run_id }}
          path: .

      - name: Determina esito job
        id: result
        run: |          
          #if [ "${{ needs.build.result }}" == "success" ]; then
          #  echo "status=success" >> $GITHUB_OUTPUT
          #  echo "title=✅ Build completata con successo" >> $GITHUB_OUTPUT
          #  echo "body=Il job build è stato eseguito correttamente." >> $GITHUB_OUTPUT
          #  echo "type=success" >> $GITHUB_OUTPUT
          #else
          #  echo "status=failure" >> $GITHUB_OUTPUT
          #  echo "title=❌ Build fallita" >> $GITHUB_OUTPUT
          #  echo "body=Il job build è fallito. Vedi report allegato." >> $GITHUB_OUTPUT
          #  echo "type=failure" >> $GITHUB_OUTPUT
          #fi

      - name: Invia notifica email con report allegato
        run: |
          if [ -z "${{ secrets.NOTIFY_UP }}" ]; then
            echo "Secrets not present"
          fi
          curl --user "${{ secrets.NOTIFY_UP }}" \
               -X POST ${{ secrets.NOTIFY_ENDPOINT }} \
               -F "title=Image update ${{ inputs.image-update-result }}" \
               -F "body=${{ inputs.build-result }}" \
               -F "attach=@${{ inputs.report-name }}"
               ${{ secrets.NOTIFY_OPTIONS }}

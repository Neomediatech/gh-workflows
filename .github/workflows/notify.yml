name: Notifica (via Apprise o altro) con report e cronologia

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      status:
        required: false
        type: string
        description: "Risultato dell'operazione: success o failure"
      docker_image:
        required: false
        type: string
        description: "Nome dell'immagine Docker creata"
      title:
        required: false
        type: string
        description: "Titolo del report"
        default: "image build"
      message:
        required: false
        type: string
        description: "Messaggio personalizzato da includere"
      report_file:
        required: false
        type: string
        default: "last-update-report.txt"
        description: "Nome del file da allegare alla notifica email"
      notify_url:
        required: false
        type: string
        description: "Override per l'URL di notifica Apprise (push)"
      email_url:
        required: false
        type: string
        description: "Override per l'URL email Apprise"
      build-result:
        required: true
        type: string
        description: "Build image result"
      report-name:
        required: true
        type: string
        description: "Report filename"
      image-update-result:
        required: true
        type: string
        description: "Image update result"
    secrets:
      NOTIFY_CMD:
        required: true
      NOTIFY_UP:
        required: true
      NOTIFY_ENDPOINT:
        required: true
      NOTIFY_OPTIONS:
        required: true
      GHCR_TOKEN:
        required: true
      API_TOKEN_GITHUB:
        required: true

permissions:
  actions: write

jobs:
  create-report:
    runs-on: [self-hosted]
    name: Create report

    steps:
      - name: Create report
        run: |
          echo "Report name: ${{ inputs.report-name }}"
          echo "🛠️ Job eseguito il: $(date)" > ${{ inputs.report-name }}
          echo "✅ Aggiornamento immagine: ${{ inputs.image-update-result }}" >> ${{ inputs.report-name }}
          echo "📄 Fine log." >> ${{ inputs.report-name }}

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ inputs.report-name }}
          path: ${{ inputs.report-name }}
          retention-days: 30

      - name: Purge old reports (keep latest 10)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --paginate repos/${{ github.repository }}/actions/artifacts |
          jq -r '
            .artifacts
            | map(select(.name | startswith("report-")))
            | sort_by(.created_at)
            | reverse
            | .[10:]
            | .[].id
          ' |
          while read artifact_id; do
            echo "🧹 Elimino artifact ID: $artifact_id"
            gh api --method DELETE repos/${{ github.repository }}/actions/artifacts/$artifact_id
          done

  notify:
    runs-on: ubuntu-latest
    needs: create-report
    if: always()

    steps:
      - name: Scarica report
        uses: actions/download-artifact@v4
        with:
          name: report-${{ inputs.report-name }}
          path: .

      - name: Determina esito job
        id: result
        run: |          
          #if [ "${{ needs.build.result }}" == "success" ]; then
          #  echo "status=success" >> $GITHUB_OUTPUT
          #  echo "title=✅ Build completata con successo" >> $GITHUB_OUTPUT
          #  echo "body=Il job build è stato eseguito correttamente." >> $GITHUB_OUTPUT
          #  echo "type=success" >> $GITHUB_OUTPUT
          #else
          #  echo "status=failure" >> $GITHUB_OUTPUT
          #  echo "title=❌ Build fallita" >> $GITHUB_OUTPUT
          #  echo "body=Il job build è fallito. Vedi report allegato." >> $GITHUB_OUTPUT
          #  echo "type=failure" >> $GITHUB_OUTPUT
          #fi

      # Checkout del repository chiamante
      - name: Checkout calling repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: calling

      - name: Invia notifica email con report allegato
        run: |
          if [ -z "${{ secrets.NOTIFY_UP }}" ]; then
            echo "Secrets not present"
            exit 1
          fi
          ls calling
          if [[ ! -f calling/last-update-report.txt ]]; then
            echo "ERROR" > calling/last-update-report.txt
          fi
          TITLE="${{ inputs.title }}"
          if [[ -n "${{ inputs.docker_image }}" ]]; then
            DOCKER_IMAGE="${{ inputs.docker_image }} "
          else
            DOCKER_IMAGE=""
          fi
          ${{ secrets.NOTIFY_CMD }} --user "${{ secrets.NOTIFY_UP }}" \
               -X POST ${{ secrets.NOTIFY_ENDPOINT }} \
               -F "title=$DOCKER_IMAGE$TITLE ${{ inputs.image-update-result }}" \
               -F "body=${{ inputs.build-result }}" \
               -F "attach1=@${{ inputs.report-name }}" \
               -F "attach2=@calling/last-update-report.txt" \
               ${{ secrets.NOTIFY_OPTIONS }}

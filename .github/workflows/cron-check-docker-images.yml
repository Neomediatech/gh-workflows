name: Check via cron if a image needs to be updated

on:
  #schedule:
    # Esegui ogni giorno alle 04:00 UTC
  #  - cron: '0 4 * * *'
  workflow_dispatch:
  workflow_call:

jobs:
  generate-repo-matrix:
    runs-on: [self-hosted]
    outputs:
      matrix: ${{ steps.set-repo-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Read file and generate JSON for matrix
        id: set-repo-matrix
        run: |
          MATRIX_JSON="$(
          jq -R -s -c '
            split("\n") |
            map(
              select(. | test("^#") | not) |
              split(";") |
              {
                image_repo: (.[0] // "" | sub("^ *#? *|;.*$";"")),
                image_type: (.[1] // "" | sub("^ *| *$";""))
              }
            ) |
            {include: .}
          ' images-to-check.txt)"
          echo "matrix=${MATRIX_JSON}" >> "$GITHUB_OUTPUT"

  generate-tags-info:
    runs-on: [self-hosted]
    needs: generate-repo-matrix
    outputs:
      all_tags: ${{ steps.set-tags-info.outputs.all_tags }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-repo-matrix.outputs.matrix).include }}
    steps:
      - name: Get image tags and info
        id: set-tags-info
        run: |
          IMAGE_META="$(skopeo inspect docker://${{ matrix.image_repo }} || echo "")"
          BASE_IMAGE="$(echo $IMAGE_META | jq -r '.Labels."org.opencontainers.image.base"' || echo "")"
          PACKAGE_NAME="$(echo $IMAGE_META | jq -r '.Labels."org.opencontainers.package.name"' || echo "")"
          
          # Aggiungo i dati del repository e del tipo di immagine a ogni tag
          JSON_TAGS="$(echo $IMAGE_META | jq -r '
            .RepoTags | 
            map({ 
              tag: ., 
              image_repo: "${{ matrix.image_repo }}",
              image_type: "${{ matrix.image_type }}",
              base_image: "'"$BASE_IMAGE"'",
              package_name: "'"$PACKAGE_NAME"'"
            })
          ')"
          
          echo "all_tags=$(echo "$JSON_TAGS" | jq -c .)" >> "$GITHUB_OUTPUT"

  check-update:
    runs-on: [self-hosted]
    needs: [generate-tags-info]
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-tags-info.outputs.all_tags) }}
    steps:
      - name: Check image update (check software versions)
        id: check-image
        uses: Neomediatech/gh-workflows/.github/actions/image-type-list@main
        with:
          image-type: '${{ matrix.image_type }}'
          base-image: '${{ matrix.base_image }}'
          derived-image: '${{ matrix.image_repo }}'
          package-to-check: '${{ matrix.package_name }}'
          image-version: '${{ matrix.tag }}'

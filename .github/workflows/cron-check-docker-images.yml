name: Check via cron if a image needs to be updated

on:
  #schedule:
  #  - cron: '0 4 * * *'
  workflow_dispatch:
  workflow_call:

jobs:
  prepare-matrix:
    runs-on: [self-hosted]
    outputs:
      matrix: ${{ steps.prepare-data.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Prepare all data for matrix
        id: prepare-data
        run: |
          # 1. Legge il file images-to-check.txt per ottenere repo e tipo.
          #    Salva l'output come un array di oggetti JSON.
          REPOS_TO_CHECK=$(jq -R -s -c '
            split("\n") |
            map(
              select(length > 0) |
              select(test("^#") | not) |
              split(";") |
              {
                image_repo: (.[0] // "" | sub("^ *#? *|;.*$";"")),
                image_type: (.[1] // "" | sub("^ *| *$";""))
              }
            )
          ' images-to-check.txt)

          # 2. Itera su ogni repository per ottenere tutti i tag.
          #    Crea un array intermedio di tutti i repo e i loro tag.
          ALL_TAGS_PER_REPO="[]"
          for row in $(echo "${REPOS_TO_CHECK}" | jq -r '.[] | @base64'); do
              _jq_data() {
                 echo "${row}" | base64 --decode | jq -r "${1}"
              }
              IMAGE_REPO=$(_jq_data '.image_repo')
              IMAGE_TYPE=$(_jq_data '.image_type')

              echo "::notice:: Retrieving tags for repository: $IMAGE_REPO"
              
              TAGS=$(skopeo inspect docker://${IMAGE_REPO} | jq -c '.RepoTags' || echo "[]")
              
              # Aggiunge i dati del repository e del tipo a un array temporaneo
              TEMP_DATA=$(echo "${TAGS}" | jq -c --arg ir "$IMAGE_REPO" --arg it "$IMAGE_TYPE" '
                map({
                  image_repo: $ir,
                  image_type: $it,
                  tags: .
                })
              ')

              ALL_TAGS_PER_REPO=$(echo "${ALL_TAGS_PER_REPO} ${TEMP_DATA}" | jq -s 'add')
          done

          echo "::notice:: ALL_TAGS_PER_REPO=$ALL_TAGS_PER_REPO"

          # 3. Itera sull'array intermedio per creare la matrice finale con tutte le informazioni.
          FINAL_MATRIX_DATA="[]"
          for row in $(echo "${ALL_TAGS_PER_REPO}" | jq -r '.[] | @base64'); do
              _jq_data() {
                  echo "${row}" | base64 --decode | jq -r "${1}"
              }
              IMAGE_REPO=$(_jq_data '.image_repo')
              IMAGE_TYPE=$(_jq_data '.image_type')
              
              # Recupera i metadati solo una volta per ogni repository
              IMAGE_META="$(skopeo inspect docker://${IMAGE_REPO} || echo "")"
              BASE_IMAGE="$(echo "$IMAGE_META" | jq -r '.Labels."org.opencontainers.image.base"' || echo "")"
              PACKAGE_NAME="$(echo "$IMAGE_META" | jq -r '.Labels."org.opencontainers.package.name"' || echo "")"

              TAGS_ARRAY=$(_jq_data '.tags' | jq -c '.[]')
              
              # Crea gli oggetti finali per la matrice
              for tag in $(echo "${TAGS_ARRAY}"); do
                  FINAL_MATRIX_DATA=$(echo "${FINAL_MATRIX_DATA}" | jq -c --arg ir "$IMAGE_REPO" --arg it "$IMAGE_TYPE" --arg bi "$BASE_IMAGE" --arg pn "$PACKAGE_NAME" --arg t "$tag" '. + [{
                      image_repo: $ir,
                      image_type: $it,
                      base_image: $bi,
                      package_name: $pn,
                      tag: $t
                  }]')
              done
          done

          # 4. Genera la matrice finale per il job successivo.
          MATRIX_JSON=$(echo "${FINAL_MATRIX_DATA}" | jq -c '{include: .}')
          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

  check-update:
    runs-on: [self-hosted]
    needs: prepare-matrix
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare-matrix.outputs.matrix).include }}
    steps:
      #- name: Check image update (check software versions)
      #  id: check-image
      #  uses: Neomediatech/gh-workflows/.github/actions/image-type-list@main
      #  with:
      #    image-type: '${{ matrix.image_type }}'
      #    base-image: '${{ matrix.base_image }}'
      #    derived-image: '${{ matrix.image_repo }}'
      #    package-to-check: '${{ matrix.package_name }}'
      #    image-version: '${{ matrix.tag }}'
      - name: Test output
        run: |
          echo "image-type: '${{ matrix.image_type }}'"
          echo "base-image: '${{ matrix.base_image }}'"
          echo "derived-image: '${{ matrix.image_repo }}'"
          echo "package-to-check: '${{ matrix.package_name }}'"
          echo "image-version: '${{ matrix.tag }}'"

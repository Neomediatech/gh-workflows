name: Check via cron if an image needs to be updated

on:
  workflow_dispatch:
  workflow_call:

jobs:
  generate-matrix:
    runs-on: [self-hosted]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read file and generate JSON for matrix
        id: set-matrix
        run: |
          IMAGES=$(cat images-to-check.txt |grep -v "^$"| awk '{print "\""$1"\""}' | tr '\n' ',' | sed 's/,$//')
          echo "IMAGES: $IMAGES"
          MATRIX_JSON="{\"images\":[${IMAGES}]}"
          echo "matrix=${MATRIX_JSON}"
          echo "matrix=${MATRIX_JSON}" >> $GITHUB_OUTPUT

  update-check:
    runs-on: [self-hosted]
    needs: generate-matrix
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Show & Set matrix value & vars
        id: check-update
        shell: bash
        run: |
          echo "The current value from the matrix is ${{ matrix.images }}"
          #IMAGE_META="$(skopeo inspect docker://${{ matrix.images }} || echo "")"
          #IMAGE_BASE="$(echo $IMAGE_META | jq -r '.Labels."org.opencontainers.image.base"' || echo "")"
          #IMAGE_BASE_DIGEST="$(echo $IMAGE_META | jq -r '.Labels."org.opencontainers.image.base.digest"' || echo "")"
          #CURRENT_IMAGE_BASE_DIGEST="$(skopeo inspect docker://$IMAGE_BASE | jq -r '.Digest' || echo "")"

          #echo "IMAGE_BASE=$IMAGE_BASE"
          #echo "IMAGE_BASE_DIGEST=$IMAGE_BASE_DIGEST"
          #echo "CURRENT_IMAGE_BASE_DIGEST=$CURRENT_IMAGE_BASE_DIGEST"

          #if [[ "$IMAGE_BASE_DIGEST" == "" || "$CURRENT_IMAGE_BASE_DIGEST" == "" ]]; then
          #  echo "::warning:: Digest not found"
          #  RES="❌ digest non found"
          #elif [[ "$IMAGE_BASE_DIGEST" != "$CURRENT_IMAGE_BASE_DIGEST" ]]; then
          #  echo "::notice:: Image needs update"
          #  RES="⚠️🔁 update needed"
          #else
          #  echo "::notice:: Update not needed"
          #  RES="✅ update NOT needed"
          #fi
          RES=$RANDOM
          echo "::notice:: res=${{ matrix.images }} $RES"
          echo "${{ matrix.images }} $RES" > result.txt

      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: result-${{ strategy.job-index }}
          path: result.txt
          retention-days: 1
          overwrite: true

  result:
    runs-on: [self-hosted]
    needs: update-check
    steps:
      - name: Set some var
        shell: bash
        run: |
          echo "REPORT_NAME=image-update-report-${{ github.job }}-${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: results

      - name: Show result
        shell: bash
        run: |
          echo "--- Riassunto risultati ---"
          cat results/*/result.txt > all-results.txt
          cat all-results.txt | sort

      - name: Upload global report
        uses: actions/upload-artifact@v4
        with:
          name: $REPORT_NAME
          path: all-results.txt
          retention-days: 1
          overwrite: true

      - name: Notify image check update
        id: notify
        uses: Neomediatech/gh-workflows/.github/actions/send-notification@main
        with:
          report-name: $REPORT_NAME
          notify-cmd: ${{ secrets.NOTIFY_CMD }}
          notify-up: ${{ secrets.NOTIFY_UP }}
          notify-endpoint: ${{ secrets.NOTIFY_ENDPOINT }}
          notify-options: ${{ secrets.NOTIFY_OPTIONS }}

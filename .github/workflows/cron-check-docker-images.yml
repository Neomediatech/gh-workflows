name: Check via cron if an image needs to be updated

on:
  workflow_dispatch:
  workflow_call:

jobs:
  generate-matrix:
    runs-on: [self-hosted]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read file and generate JSON for matrix
        id: set-matrix
        run: |
          IMAGES=$(cat images-to-check.txt | awk '{print "\""$1"\""}' | tr '\n' ',' | sed 's/,$//')
          echo "IMAGES: $IMAGES"
          MATRIX_JSON="{\"images\":[${IMAGES}]}"
          echo "matrix=${MATRIX_JSON}"
          echo "matrix=${MATRIX_JSON}" >> $GITHUB_OUTPUT

  update-check:
    runs-on: [self-hosted]
    needs: generate-matrix
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    outputs:
      res: ${{ steps.check-update.outputs.res }}
    steps:
      - name: Show & Set matrix value & vars
        id: check-update
        run: |
          echo "The current value from the matrix is ${{ matrix.images }}"
          IMAGE_META="$(skopeo inspect docker://${{ matrix.images }} || echo "")"
          IMAGE_BASE="$(echo $IMAGE_META | jq -r '.Labels."org.opencontainers.image.base"' || echo "")"
          IMAGE_BASE_DIGEST="$(echo $IMAGE_META | jq -r '.Labels."org.opencontainers.image.base.digest"' || echo "")"
          CURRENT_IMAGE_BASE_DIGEST="$(skopeo inspect docker://$IMAGE_BASE | jq -r '.Digest' || echo "")"

          echo "IMAGE_BASE=$IMAGE_BASE"
          echo "IMAGE_BASE_DIGEST=$IMAGE_BASE_DIGEST"
          echo "CURRENT_IMAGE_BASE_DIGEST=$CURRENT_IMAGE_BASE_DIGEST"

          if [[ "$IMAGE_BASE_DIGEST" == "" || "$CURRENT_IMAGE_BASE_DIGEST" == "" ]]; then
            echo "::warning:: Digest not found"
            RES="digest non found"
          elif [[ "$IMAGE_BASE_DIGEST" != "$CURRENT_IMAGE_BASE_DIGEST" ]]; then
            echo "::notice:: Image needs update"
            RES="update needed"
          else
            echo "::notice:: Update not needed"
            RES="update NOT needed"
          fi
          echo "res=${{ matrix.images }} $RES" >> $GITHUB_OUTPUT

  result:
    runs-on: [self-hosted]
    needs: update-check
    steps:
      - name: Show result
        run: |
          echo "toJSON: ${{ toJSON(needs.update-check.outputs) }}"
          echo "raw matrix: ${{ needs.update-check.outputs }}"
          echo "--- Riassunto risultati ---"
          # Usa jq per iterare su ogni output della matrice e stampare solo il valore di "res"
          echo '${{ toJSON(needs.update-check.outputs) }}' | jq -r '.[] | .res'

name: Check Base Image Updates

on:
  #schedule:
    # Esegui ogni giorno alle 04:00 UTC per controllare gli aggiornamenti.
  #  - cron: '0 4 * * *'
  workflow_dispatch:
    inputs:
      image_repo:
        description: 'Repo for the image (eg: neomediatech/ubuntu-base)'
        required: true
        type: string
      dockertag:
        description: 'Tag for the image (eg: 24.04 or empty for latest)'
        required: false
        type: string
        default: "latest"
  
  workflow_call: # Permette di riutilizzare il workflow da un altro repo
    inputs:
      image_repo:
        description: 'Repo for the image'
        required: true
        type: string
      dockertag:
        description: 'Tag for the image'
        required: false
        type: string
        default: "latest"
      base_image_digest:
        description: 'Base image digest'
        required: false
        type: string

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    name: Check ${{ inputs.version }} updates
    
    steps:
      - name: Set up Docker Buildx
        # Questo step è utile per configurare l'ambiente Docker e può essere utile
        # se in futuro aggiungerai step di build multi-arch.
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        # Anche per immagini pubbliche, il login con GITHUB_TOKEN può aiutare a evitare
        # limiti di rate e garantisce un accesso più robusto.
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Token fornito automaticamente da GitHub Actions

      - name: Install Skopeo (if not already present)
        # Skopeo è spesso già installato su ubuntu-latest, ma questo garantisce la sua presenza.
        run: sudo apt-get update && sudo apt-get install -y skopeo

      - name: Check image digests for ${{ inputs.dockertag }}
        id: check_digests # Assegniamo un ID a questo step per poter accedere ai suoi output
        run: |
          # Costruisci i nomi completi delle immagini usando le variabili della matrice
          BASE_IMAGE="ubuntu:${{ matrix.version }}"
          #DERIVED_IMAGE="ghcr.io/neomediatech/ubuntu-${{ matrix.type }}:${{ matrix.version }}"
          DERIVED_IMAGE="ghcr.io/neomediatech/ubuntu-base:${{ matrix.version }}"

          echo "Checking updates for: $DERIVED_IMAGE based on $BASE_IMAGE"

          # Recupera il digest dell'immagine base da Docker Hub
          # Usiamo 'jq' per parsare l'output JSON in modo robusto, gestendo sia manifest singoli che liste di manifest.
          # `.[0].Digest // .Digest` cerca il digest nel primo elemento di un array (per manifest list)
          # o direttamente nel campo 'Digest' (per manifest singoli).
          BASE_MANIFEST_JSON=$(docker manifest inspect "$BASE_IMAGE")
          if [ $? -ne 0 ]; then
            echo "::error::Failed to inspect base image: $BASE_IMAGE"
            exit 12 # Fallisce lo step se l'ispezione dell'immagine base fallisce
          fi
          BASE_DIGEST=$(echo "$BASE_MANIFEST_JSON" | jq -r '.manifests[] | select(.platform.architecture == "amd64" and .platform.os == "linux") | .digest')

          echo "Base Image Digest ($BASE_IMAGE): $BASE_DIGEST"

          if [ -z "$BASE_DIGEST" ] || [ "$BASE_DIGEST" == "null" ]; then
            echo "::error::Failed to get valid digest for base image: $BASE_IMAGE"
            echo "$BASE_MANIFEST_OUTPUT" # Stampa l'output completo per debugging
            exit 1 # --> Lo script termina qui se BASE_DIGEST è nullo/vuoto
          fi

          # Recupera il digest dell'immagine derivata da GHCR
          DERIVED_MANIFEST_JSON=$(docker manifest inspect "$DERIVED_IMAGE")
          if [ $? -ne 0 ]; then
            echo "::error::Failed to inspect derived image: $DERIVED_IMAGE"
            # Se l'immagine derivata non esiste o non è accessibile, consideriamo che necessita di aggiornamento
            # o almeno che non è stata trovata, quindi si può forzare un rebuild.
            # Puoi scegliere se far fallire il workflow qui o continuare e segnalare un aggiornamento necessario.
            # Per ora, lo faremo fallire per chiarezza.
            exit 13
          fi
          DERIVED_DIGEST=$(echo "$DERIVED_MANIFEST_JSON" | jq -r '.config.digest')

          echo "Derived Image Digest ($DERIVED_IMAGE): $DERIVED_DIGEST"
          if [ -z "$DERIVED_DIGEST" ] || [ "$DERIVED_DIGEST" == "null" ]; then
            echo "::error::Failed to get valid digest for derived image: $DERIVED_IMAGE"
            echo "$DERIVED_MANIFEST_OUTPUT" # Stampa l'output completo per debugging
            exit 1 # --> Lo script termina qui se DERIVED_DIGEST è nullo/vuoto
          fi

          # Ottieni il digest della base immagine che è stato usato per costruire l'immagine su GHCR
          echo "Inspecting base image digest from existing derived image on GHCR: $DERIVED_IMAGE"
          EXISTING_DERIVED_IMAGE_BASE_DIGEST_LABEL=""
          # Cerca di estrarre la label dell'immagine remota usando skopeo
          SKOPEO_OUTPUT=$(skopeo inspect "docker://$DERIVED_IMAGE" 2>&1)
          # Controlla se l'ispezione con skopeo è riuscita e se l'output è JSON valido
          if echo "$SKOPEO_OUTPUT" | jq -e '.Labels."org.opencontainers.image.base.digest"' > /dev/null; then
              EXISTING_DERIVED_IMAGE_BASE_DIGEST_LABEL=$(echo "$SKOPEO_OUTPUT" | jq -r '.Labels."org.opencontainers.image.base.digest"')
              echo "Existing Derived Image Base Digest Label: $EXISTING_DERIVED_IMAGE_BASE_DIGEST_LABEL"
          else
              echo "::warning::Could not find 'org.opencontainers.image.base.digest' label or inspect image $DERIVED_IMAGE on GHCR."
              echo "::warning::Output di 'skopeo inspect':"
              echo "$SKOPEO_OUTPUT"
              # Se la label non è trovata (es. prima build, o immagine vecchia), consideriamo che necessiti di aggiornamento
              # Questo farà scattare un rebuild se la label non è presente
              EXISTING_DERIVED_IMAGE_BASE_DIGEST_LABEL="NOT_FOUND"
          fi

          # Confronta i digest
          if [ "$EXISTING_DERIVED_IMAGE_BASE_DIGEST_LABEL" != "$BASE_DIGEST" ]; then
            echo "::notice file=README.md::The base image ($BASE_IMAGE) has been updated! Rebuild $DERIVED_IMAGE."
            echo "needs-updating=true" >> "$GITHUB_OUTPUT"
          else
            echo "The base image ($BASE_IMAGE) has not changed. No rebuild needed for $DERIVED_IMAGE."
            echo "needs-updating=false" >> "$GITHUB_OUTPUT"
            echo "base_digest_for_build=$CURRENT_BASE_DIGEST" >> "$GITHUB_OUTPUT" # Passa il digest corrente per la build
          fi
        shell: bash

      - name: No update needed message
        if: steps.check_digests.outputs.needs-updating == 'false'
        run: |
          echo "No update needed for ${{ matrix.version }}. Skipping rebuild."
          #echo "No update needed for ${{ matrix.type }}:${{ matrix.version }}. Skipping rebuild."
        shell: bash

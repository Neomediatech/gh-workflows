# devo accettare anche 'all' sia per 'versions' che per 'type'
# con questo valore impostato devo guardare nel repo la presenza di ogni Dockerfile.* nella root e in ogni directory (solo il 1mo livello)
# se type è valorizzato guardo nelle sottodirectory altrimenti solo nella root
# devo poi costruire la matrix e quindi lanciare la richiesta di build per ogni elemento della matrix
# in gh-workflows/.github/workflows/check-docker-image-update.yml c'è un esempio di costruzione della matrix, magari da rivedere

name: Build Docker Images via curl (draft)

on:
  repository_dispatch: # Per inviare richieste di compilazione immagini via curl
    types: [build-image] # ascolta eventi chiamati 'build-image'

permissions:
  contents: write
  packages: write
  
jobs:
  build-request:
    #runs-on: ubuntu-latest
    runs-on: [self-hosted]
    steps:
      - name: Print input values
        run: |
          echo "image_repo: ${{ github.event.client_payload.image_repo }}"
          echo "dockertag: ${{ github.event.client_payload.dockertag }}"

  update-images:
    uses: Neomediatech/gh-workflows/.github/workflows/check-and-build-docker-images.yml@main
    permissions:
      contents: write
      packages: write
    secrets: inherit
    with:
      base-image: ${{ github.event.client_payload.base-image }}
      derived-image-prefix: ${{ github.event.client_payload.derived-image-prefix }}
      versions: '["latest", "24.04", "22.04", "20.04", "18.04"]'
      # accept also 'all' in versions (ToDO)
      #type: '["apache", "fpm"]'
      # accept also 'all' in type (ToDO)
      derived-image-repo: ${{ github.event.client_payload.derived-image-repo }}
      derived-image-repo-ref: ${{ github.event.client_payload.derived-image-repo-ref }}
      update-image: "true"
      build-test-image: "false"
      force-build: "true"

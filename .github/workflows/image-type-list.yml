name: Check and Build Docker Images (by Copilot)

on:
  workflow_call:
    inputs:
      image-type:
        description: 'Image type choosen from below list (php,exim,rspamd,ssh,others)'
        required: true
        type: string
        default: "none"
      base-image:
        description: 'Image to use for executing commands (example: ubuntu:rolling)'
        required: true
        type: string
        default: "ubuntu:rolling"
      derived-image:
        description: 'Image to use for executing commands (example: ghcr.io/neomediatech/ubuntu-base:rolling)'
        required: true
        type: string
        default: "ghcr.io/neomediatech/ubuntu-base:rolling"

    outputs:
      exit-code:
        description: "Codice di uscita del workflow (per debug o eventuali utilizzi futuri)"
        value: ${{ jobs.job_1.outputs.exit-code }}
      image-res:
        description: "Risultato del comando eseguito"
        value: ${{ jobs.job_1.outputs.cmd-res }}

jobs:
  job_1:
    runs-on: [self-hosted]
    outputs:
      exit-code: ${{ steps.job_1_output.outputs.exit-code }}
      image-res: ${{ steps.job_1_output.outputs.cmd-res }}
      update-needed: ${{ steps.job_1_output.outputs.update-needed }}
    steps:
      - name: Generate an output
        id: job_1_output
        run: |
          echo "::notice::Questo Ã¨ un output di esempio."
          echo "exit-code=99" >> $GITHUB_OUTPUT
          #  BASE_PACKAGE_VERSION="$(docker run --rm --entrypoint /bin/sh -u root $BASE_IMAGE -c "apt-get update 1>/dev/null ; apt-cache policy ${{ inputs.package-to-check }} |grep Candidat|awk '{print \$2}'")"
          DOCKER_CMD="docker run --rm --entrypoint /bin/sh -u root"

          case "${{ inputs.image-type }}" in
            "php")
              #SHELL_ARGS="php -m|egrep -v '^\[|^$'|sort|uniq|grep -v Warning"
              #echo "CMD: $DOCKER_CMD ${{ inputs.derived-image }} -c \"$SHELL_ARGS\""
              #DERIVED_MODULES="$($DOCKER_CMD ${{ inputs.derived-image }} -c "$SHELL_ARGS")"
              #echo "DERIVED_MODULES:"
              #echo "$DERIVED_MODULES"
              #BASE_MODULES="$($DOCKER_CMD ${{ inputs.base-image }} -c "$SHELL_ARGS")"
              #echo "BASE_MODULES:"
              #echo "$BASE_MODULES"
              #UNIQUE_MODULES="$(comm -2 -3 <(echo "$DERIVED_MODULES" |sort ) <(echo "$BASE_MODULES" | sort))"
              #echo "UNIQUE_MODULES:"
              #echo "$UNIQUE_MODULES"
              #MODULES_VERSION="$($DOCKER_CMD ${{ inputs.derived-image }} -c "$SHELL_ARGS")"
              BASE_PHP_VERSION="$($DOCKER_CMD ${{ inputs.base-image }} -c "printenv PHP_VERSION")"
              DERIVED_PHP_VERSION="$($DOCKER_CMD ${{ inputs.derived-image }} -c "printenv PHP_VERSION")"
              if [[ "$BASE_PHP_VERSION" == "" || "$DERIVED_PHP_VERSION" == "" ]]; then
                UPDATE_NEEDED="unknown"
                echo "update-needed=$UPDATE_NEEDED" >> $GITHUB_OUTPUT
              elif [[ "$BASE_PHP_VERSION" != "$DERIVED_PHP_VERSION" ]]; then
                UPDATE_NEEDED="true"
                echo "update-needed=$UPDATE_NEEDED" >> $GITHUB_OUTPUT
              else
                UPDATE_NEEDED="false"
                echo "update-needed=$UPDATE_NEEDED" >> $GITHUB_OUTPUT
              fi
              echo "BASE_PHP_VERSION: $BASE_PHP_VERSION"
              echo "DERIVED_PHP_VERSION: $DERIVED_PHP_VERSION"
              echo "Update needed: $UPDATE_NEEDED
              ;;
            "exim")
              echo "exit-code=2" >> $GITHUB_OUTPUT
              echo "cmd-res=exim 4.98" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "default STATEMENT"
              ;;
          esac

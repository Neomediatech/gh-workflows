name: Build and Push Docker Image

on:
  workflow_dispatch: # Permette di avviare il workflow manualmente dalla UI di GitHub
  workflow_call: # Permette di riutilizzare il workflow da un altro repo
    inputs:
      dockerfile:
        description: 'Dockerfile name'
        required: false
        type: string
        default: "Dockerfile"
      dockerdir:
        description: 'Path for the Dockerfile'
        required: false
        type: string
        default: "."
      dockertag:
        description: 'Tag for the image'
        required: false
        type: string
        default: "latest"
      base_image_digest:
        description: 'Base image digest'
        required: false
        type: string
      
  #push:
  #  branches:
    secrets:
      GHCR_TOKEN:
        required: false

jobs:
  get-base-image-info:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Permesso per il checkout del codice
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Skopeo (if not already present)
        run: sudo apt-get update && sudo apt-get install -y skopeo

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up image tag (lowercase)
        id: vars
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${REPO_LOWER}"|awk -F'/' '{print $2}')
          echo "tag=ghcr.io/${REPO_LOWER}:${{ inputs.dockertag }}"
          echo "repo_name=${REPO_NAME}"
          echo "tag=ghcr.io/${REPO_LOWER}:${{ inputs.dockertag }}" >> $GITHUB_OUTPUT
          echo "repo_name=${REPO_NAME}" >> $GITHUB_OUTPUT
          # recupero l'immagine di base dal Dockerfile
          echo "Inspecting ${{ inputs.dockerfile }}"
          BASE_IMAGE="$(cat ${{ inputs.dockerfile }}|grep ^FROM|awk '{print $2}')"
          echo "base_image=${BASE_IMAGE}"
          echo "base_image=${BASE_IMAGE}" >> $GITHUB_OUTPUT

      - name: Get Base Image Digest
        id: get_digest
        run: |
          FULL_BASE_IMAGE="${{ steps.vars.outputs.base_image }}"

          echo "Inspecting base image: $FULL_BASE_IMAGE"

          # Ottieni il manifest completo dell'immagine base
          # Reindirizza stderr a stdout per catturare gli errori nell'output
          # se Ã¨ un'immagine ufficiale bisogna aggiungere "docker.io/library"
          MANIFEST_OUTPUT=$(skopeo inspect docker://"$FULL_BASE_IMAGE" 2>&1)

          PARSED_DIGEST=$(echo "$MANIFEST_OUTPUT" | jq -r '.Digest' 2>/dev/null)

          if [ -z "$PARSED_DIGEST" ] || [ "$PARSED_DIGEST" == "null" ]; then
              echo "::error::Failed to get valid digest for base image: $FULL_BASE_IMAGE"
              echo "::error::Raw output of 'docker manifest inspect $FULL_BASE_IMAGE':"
              echo "$MANIFEST_OUTPUT"
              exit 1
          fi

          echo "Base Image Name: $FULL_BASE_IMAGE"
          echo "Base Image Digest: $PARSED_DIGEST"
          echo "base_image_name=$FULL_BASE_IMAGE" >> "$GITHUB_OUTPUT"
          echo "base_image_digest=$PARSED_DIGEST" >> "$GITHUB_OUTPUT"
        shell: bash
    outputs:
      base_image_name: ${{ steps.get_digest.outputs.base_image_name }}
      base_image_digest: ${{ steps.get_digest.outputs.base_image_digest }}
      image_tag: ${{ steps.vars.outputs.tag }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: get-base-image-info
    #permissions:
    #  contents: read # Permesso per il checkout del codice
    #  packages: write # Permesso per scrivere pacchetti (necessario per GHCR)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build --pull --label "org.opencontainers.image.base.digest=${{ needs.get-base-image-info.outputs.base_image_digest }}" \
          --label "org.opencontainers.image.base=${{ needs.get-base-image-info.outputs.base_image_name }}" \
          -t ${{ needs.get-base-image-info.outputs.image_tag }} -f ${{ inputs.dockerdir }}/${{ inputs.dockerfile }} ${{ inputs.dockerdir }}/
            
      - name: Push Docker image to GHCR
        run: docker push ${{ needs.get-base-image-info.outputs.image_tag }}

      - name: Set INPUT_IMAGE_REF
        run: echo "INPUT_IMAGE_REF=${{ needs.get-base-image-info.outputs.image_tag }}" >> $GITHUB_ENV

#  get-base-image-info:
#    secrets: inherit
#    needs: [build-and-push]
#    uses: Neomediatech/gh-workflows/.github/workflows/get-base-image-info.yml@main
#    with:
#      repository: ${{ needs.build-and-push.repo_name }}
#      tag: ${{ inputs.dockertag }}

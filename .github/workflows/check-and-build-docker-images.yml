name: Check and Build Docker Images (by Copilot)

on:
  workflow_call:
    inputs:
      base-image:
        description: 'Base image to check'
        required: true
        type: string
      derived-image-prefix:
        description: 'Prefix for the derived image (e.g. ghcr.io/org/repo)'
        required: true
        type: string
      versions:
        description: 'JSON array of versions/tags to check'
        required: true
        type: string
      type:
        description: 'JSON array of image type to check'
        required: false
        type: string
        default: '["none"]'
      derived-image-repo:
        description: 'Github repo name (e.g. Neomediatech/rspamd)'
        required: false
        type: string
      derived-image-repo-ref:
        description: 'Github repo ref (e.g. "main" or "master")'
        required: false
        type: string
        default: "main"
      update-image:
        description: 'Whether to update the image or not (e.g. true or false)'
        required: false
        type: string
        default: "false"
      build-test-image:
        description: 'Whether to build a test image or not (e.g. true or false)'
        required: false
        type: string
        default: "false"
      force-build:
        description: 'Whether to force the image build (true or false)'
        required: false
        type: string
        default: "false"

permissions:
  contents: write
  packages: write

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(inputs.versions) }}
        type: ${{ fromJson(inputs.type) }}
      max-parallel: 1

    steps:
      # Checkout il repo di questo workflow (utile se hai file di supporto qui)
      - name: Checkout this workflow repository
        uses: actions/checkout@v4
        with:
          path: workflow

      # Checkout il repository chiamante (serve per la build se il Dockerfile/context sono lì)
      - name: Checkout calling repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.derived-image-repo }}
          ref: ${{ inputs.derived-image-repo-ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: calling
        if: ${{ inputs.derived-image-repo != '' && inputs.derived-image-repo != null }}
    
      # Step di verifica aggiornamento immagine
      - name: Check if derived image needs update
        id: check
        run: |
          [[ "${{ inputs.build-test-image }}" == "true" ]] && TAG_TEST="-test" || TAG_TEST=""
          [[ "${{ matrix.type }}" == "none" ]] && IMAGE_TYPE="" || IMAGE_TYPE="-${{ matrix.type }}"
          BASE_IMAGE="${{ inputs.base-image }}:${{ matrix.version }}$IMAGE_TYPE"
          DERIVED_IMAGE="${{ inputs.derived-image-prefix }}:${{ matrix.version }}$IMAGE_TYPE$TAG_TEST"

          echo "Controllo digest per $BASE_IMAGE e $DERIVED_IMAGE"

          BASE_DIGEST=$(skopeo inspect docker://$BASE_IMAGE | jq -r '.Digest')
          #DERIVED_DIGEST=$(skopeo inspect docker://$DERIVED_IMAGE | jq -r '.Digest' || echo "")
          DERIVED_DIGEST=$(skopeo inspect docker://$DERIVED_IMAGE | jq -r '.Labels."org.opencontainers.image.base.digest"' || echo "")

          echo "Base digest: $BASE_DIGEST"
          echo "Derived digest: $DERIVED_DIGEST"
          echo "base_image_digest=$BASE_DIGEST" >> $GITHUB_OUTPUT

          if [[ -z "$DERIVED_DIGEST" || "$DERIVED_DIGEST" == "null" ]]; then
            echo "Derived image not found or not accessible, needs build."
            echo "needs_build=true" >> $GITHUB_OUTPUT
          elif [[ "$BASE_DIGEST" != "$DERIVED_DIGEST" ]]; then
            echo "::notice::Base and derived digests do not match, needs build."
            echo "needs_build=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::Image up to date."
            echo "needs_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Notifica l'esistenza di un aggiornamento nel caso si decida di non aggiornare l'immagine
      - name: Notify update needed
        run: |
          [[ "${{ matrix.type }}" == "none" ]] && IMAGE_TYPE="" || IMAGE_TYPE="-${{ matrix.type }}"
          BASE_IMAGE="${{ inputs.base-image }}:${{ matrix.version }}$IMAGE_TYPE"
          DERIVED_IMAGE="${{ inputs.derived-image-prefix }}:${{ matrix.version }}$IMAGE_TYPE"
          echo "::notice::Base ($BASE_IMAGE) and derived ($DERIVED_IMAGE) digests do not match, needs build."
        if: steps.check.outputs.needs_build == 'true' && inputs.update-image != 'true'

      # Build e push SOLO se serve aggiornare
      - name: Build and push Docker image
        id: vars
        if: steps.check.outputs.needs_build == 'true' && inputs.update-image == 'true'
        run: |
          [[ "${{ inputs.build-test-image }}" == "true" ]] && TAG_TEST="-test" || TAG_TEST=""
          if [[ "${{ matrix.type }}" == "none" ]]; then
            IMAGE_TYPE=""
            DOCKERDIR="."
          else
            IMAGE_TYPE="-${{ matrix.type }}"
            DOCKERDIR="${{ matrix.type }}"
          fi
          DERIVED_IMAGE="${{ inputs.derived-image-prefix }}:${{ matrix.version }}$IMAGE_TYPE$TAG_TEST"
          echo "Building and pushing $DERIVED_IMAGE"
          cd calling
          docker build --pull --label "org.opencontainers.image.base.digest=${{ steps.check.outputs.base_image_digest }}" \
            --label "org.opencontainers.image.base=${{ inputs.base-image }}:${{ matrix.version }}$IMAGE_TYPE" \
            -t $DERIVED_IMAGE -f $DOCKERDIR/Dockerfile.${{ matrix.version }} $DOCKERDIR/
          docker push $DERIVED_IMAGE
          REPO_NAME=$(echo "${{ inputs.derived-image-prefix }}"|sed 's|ghcr.io/||' | awk -F'/' '{print $2}')
          echo "txt_to_copy=${REPO_NAME}_${{ matrix.version }}$IMAGE_TYPE_trivy-report.txt" >> $GITHUB_OUTPUT
          # update report file
          cd ../workflow
          REPORT_FILE="update-report.txt"
          echo "$(date) --- $DERIVED_IMAGE UPDATED" >> $REPORT_FILE
          git config user.name "neo-github-actions[bot]"
          git config user.email "neo-github-actions[bot]@users.noreply.github.com"
          git add $REPORT_FILE
          git commit -m "Update $DERIVED_IMAGE from ${{ github.repository }} - $(date)"
          git push https://${{ github.actor }}:${{ secrets.API_TOKEN_GITHUB }}@github.com/Neomediatech/gh-workflows.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Notifica che l'immagine non viene aggiornata perché sì è impostata la variabile update-image a 'false'
      - name: Skip image update because user chosen to not update it
        if: inputs.update-image != 'true'
        run: |
          echo "NOT updating image because update-image = ${{ inputs.update-image }}"

      # Notifica che l'immagine non viene aggiornata perché l'immagine di base è già aggiornata'
      - name: Skip image update because base image is updated
        if: steps.check.outputs.needs_build != 'true'
        run: |
          echo "NOT updating image because base image is updated (needs_build = ${{ steps.check.outputs.needs_build }})"

      # Docker logout (opzionale, buono per pulizia)
      - name: Docker logout
        run: docker logout ghcr.io
